#ifndef __WINDOW_HPP__
#define __WINDOW_HPP__

// GLUT (OpenGL header)
#include <GL/glut.h>
#include <map>
#include <string>

#include "../picture/graphics/vertex.hpp"
#include "../picture/graphics/color.hpp"

using std::string;
using std::map;

class Window;

/*
	GLUT window abstract class

	Callbacks duplicated because it's possible to pass
	only static methods to GLUT.
*/

class Window
{
public:
	// Window constructor: window size (width; height), window title, background color
	Window(int width, int height, const char* title);
	virtual ~Window();

	// ### Derived classes callbacks ###
	// rendering function
	virtual void display() = 0;

	// ### mouse and keyboard event handlers ###
	// mouse button pressing
	virtual void mousePress(int button, int state, Vertex mousePos) = 0;
	// mouse moving
	virtual void mouseMove(Vertex mousePos) = 0;
	// mouse moving with buttons pressed (drag)
	virtual void mousePressMove(Vertex mousePos) = 0;
	// keyboard key press
	virtual void keyPress(unsigned char key, Vertex mousePos) = 0;
	// keyboard special key press (F1-F12, Arrows, etc.)
	virtual void keyPressSpecial(int key, Vertex mousePos) = 0;
	// calls when user changes window size
	virtual void reshape(int width, int height) = 0;

	// set window background color
	void setBgColor(float red, float green, float blue);

	void setMinSize(int width, int height);

private:

	// initialize GLUT
	static bool Init();

	// initialization status
	static bool initialized;
	
	// global GLUT callbacks
	static void glutDisplay();
	// button {left, right, middle}, state {pressed, released}, (x, y) - mouse position
	static void glutMousePress(int button, int state, int x, int y);
	// (x, y) - mouse position
	static void glutMouseMove(int x, int y);
	// (x, y) - mouse position
	static void glutMousePressMove(int x, int y);
	// key - character generated by keyboard, (x, y) - mouse position
	static void glutKeyPress(unsigned char key, int x, int y);
	// key - one of special keys (defined as GLUT_KEY_{name})
	static void glutKeyPressSpecial(int key, int x, int y);
	// (w, h) - new window size
	static void glutReshape(int w, int h);

	// list of all existing windows (int is a GLUT window ID)
	static map<int, Window*> windows;

	// window ID
	int id;

protected: // available for inherited classes

	// window size
	int width;
	int height;

	// minimal window size
	int minWidth;
	int minHeight;
};

#endif // __WINDOW_HPP__